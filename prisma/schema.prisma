generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
  // Note: Use DATABASE_ENV to switch between environments:
  // DATABASE_ENV=staging for staging database
  // DATABASE_ENV=production for production database
  // See src/lib/db-config.ts for configuration logic
}

model Address {
  id                 String       @id @default(cuid())
  address1           String
  address2           String?
  city               String
  state              String
  zip                String
  country            String       @default("US")
  latitude           Float?
  longitude          Float?
  formattedAddress   String?
  placeId            String?
  verifiedAt         DateTime?
  verificationMethod String?
  isActive           Boolean      @default(true)
  userId             String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations        Invitation[]

  @@map("addresses")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  phone               String?
  phoneVerified       Boolean         @default(false)
  bio                 String?
  shareInterests      String[]
  borrowInterests     String[]
  profileCompleted    Boolean         @default(false)
  onboardingStep      String?
  currentAddressId    String?
  movedInDate         DateTime?
  status              String          @default("active")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  accounts            Account[]
  addresses           Address[]
  borrowRequests      BorrowRequest[]
  lentItems           BorrowRequest[] @relation("Lender")
  branchMemberships   BranchMember[]
  ownedBranches       Branch[]        @relation("BranchOwner")
  receivedInvitations Invitation[]    @relation("InvitationReceiver")
  sentInvitations     Invitation[]    @relation("InvitationSender")
  items               Item[]
  sessions            Session[]

  @@map("users")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  type           String
  status         InvitationStatus @default(PENDING)
  message        String?
  token          String?          @unique
  qrCode         String?
  postcardSentAt DateTime?
  addressId      String?
  branchId       String?
  senderId       String?
  receiverId     String?
  createdAt      DateTime         @default(now())
  sentAt         DateTime?
  acceptedAt     DateTime?
  expiresAt      DateTime
  address        Address?         @relation(fields: [addressId], references: [id])
  branch         Branch?          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  receiver       User?            @relation("InvitationReceiver", fields: [receiverId], references: [id])
  sender         User?            @relation("InvitationSender", fields: [senderId], references: [id])

  @@unique([email, senderId, branchId])
  @@index([token])
  @@index([email])
  @@index([branchId])
  @@map("invitations")
}

model SignupApplication {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  bio             String?
  interests       String[]
  addressData     Json?
  addressVerified Boolean   @default(false)
  invitationId    String?
  referralSource  String?
  currentStep     String    @default("email")
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  expiresAt       DateTime

  @@map("signup_applications")
}

model Branch {
  id          String         @id @default(cuid())
  name        String
  description String?
  location    String?
  rules       Json?
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  ownerId     String
  members     BranchMember[]
  owner       User           @relation("BranchOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations Invitation[]
  items       Item[]

  @@map("branches")
}

model BranchMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())
  role     String   @default("member")
  isActive Boolean  @default(true)
  userId   String
  branchId String
  branch   Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, branchId])
  @@map("branch_members")
}

model StuffType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  iconPath    String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]

  @@map("stuff_types")
}

model Item {
  id             String          @id @default(cuid())
  name           String
  description    String?
  category       String?
  condition      String          @default("good")
  location       String?         // e.g., "garage", "kitchen", "basement"
  isAvailable    Boolean         @default(true)
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  stuffTypeId    String?
  ownerId        String
  branchId       String
  borrowRequests BorrowRequest[]
  branch         Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stuffType      StuffType?      @relation(fields: [stuffTypeId], references: [id])

  @@map("items")
}

model BorrowRequest {
  id               String    @id @default(cuid())
  status           String    @default("pending")
  requestedAt      DateTime  @default(now())
  approvedAt       DateTime?
  borrowedAt       DateTime?
  returnedAt       DateTime?
  dueDate          DateTime?
  notes            String?
  videoUrl         String?
  signature        String?
  promiseText      String?
  promisedReturnBy DateTime?
  lenderResponse   String?
  responseToken    String?
  respondedAt      DateTime?
  pickedUpAt       DateTime?
  remindersSent    Int       @default(0)
  lastReminderAt   DateTime?
  borrowerId       String
  lenderId         String
  itemId           String
  borrower         User      @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  item             Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  lender           User      @relation("Lender", fields: [lenderId], references: [id], onDelete: Cascade)

  @@map("borrow_requests")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  location  String?
  interests String[]
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist_entries")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuthCode {
  email     String   @id
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("auth_codes")
}

enum InvitationStatus {
  PENDING
  SENT
  ACCEPTED
  EXPIRED
  DECLINED
  CANCELLED
}
