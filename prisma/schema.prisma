// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id               String   @id @default(cuid())
  
  // Address components
  street           String   // "123 Main St"
  unit             String?  // "Apt 4B", "Unit 2", etc.
  city             String
  state            String
  postalCode       String
  country          String   @default("US")
  
  // For neighbor discovery and mapping
  latitude         Float?
  longitude        Float?
  formattedAddress String?  // Full formatted address from geocoding
  
  // Address verification
  verifiedAt       DateTime?
  verificationMethod String? // "postcard", "utility_bill", etc.
  
  // Metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relationships
  users            User[]
  invitations      Invitation[]
  
  @@map("addresses")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  phone            String?   // Phone number for SMS notifications
  phoneVerified    Boolean   @default(false)
  
  // Enhanced profile fields
  bio              String?
  interests        String[]  // Array of interest categories
  profileCompleted Boolean   @default(false)
  onboardingStep   String?   // Track signup progress: "email", "profile", "address", "verification", "complete"
  
  // Address relationship
  addressId        String?
  address          Address?  @relation(fields: [addressId], references: [id])
  addressVerified  Boolean   @default(false)
  movedInDate      DateTime? // When they moved to current address
  
  // Account status
  status           String    @default("active") // active, suspended, pending_verification
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // NextAuth relationships
  accounts Account[]
  sessions Session[]

  // App relationships
  branchMemberships BranchMember[]
  ownedBranches     Branch[]       @relation("BranchOwner")
  items             Item[]
  borrowRequests    BorrowRequest[]
  lentItems         BorrowRequest[] @relation("Lender")
  
  // Invitation relationships
  sentInvitations     Invitation[] @relation("InvitationSender")
  receivedInvitations Invitation[] @relation("InvitationReceiver")

  @@map("users")
}

model Invitation {
  id          String   @id @default(cuid())
  email       String   
  
  // Invitation context
  type        String   // "neighbor", "friend", "family", "coworker"
  status      String   @default("pending") // pending, sent, accepted, expired, declined
  message     String?  // Custom message from sender
  
  // For postcard/QR code invites
  qrCode      String?  // Unique QR code for postcard
  postcardSentAt DateTime?
  
  // Address context (for neighbor invites)
  addressId   String?
  address     Address? @relation(fields: [addressId], references: [id])
  
  // User relationships
  senderId    String?
  sender      User?    @relation("InvitationSender", fields: [senderId], references: [id])
  receiverId  String?
  receiver    User?    @relation("InvitationReceiver", fields: [receiverId], references: [id])
  
  // Metadata
  createdAt   DateTime @default(now())
  sentAt      DateTime?
  acceptedAt  DateTime?
  expiresAt   DateTime // Invitations expire after 30 days
  
  @@unique([email, senderId]) // Prevent duplicate invites
  @@map("invitations")
}

// For structured signup flow - holds partial applications
model SignupApplication {
  id              String   @id @default(cuid())
  email           String   @unique
  
  // Collected data during signup process
  name            String?
  bio             String?
  interests       String[]
  
  // Address data (before creating Address record)
  addressData     Json?    // Temporary storage: {street, city, state, etc.}
  addressVerified Boolean  @default(false)
  
  // Context
  invitationId    String?  // If they came from an invitation
  referralSource  String?  // "neighbor_invite", "friend_referral", "web", "social"
  
  // Progress tracking
  currentStep     String   @default("email") // email, profile, address, verification, complete
  status          String   @default("active") // active, completed, expired, abandoned
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  completedAt     DateTime?
  expiresAt       DateTime // Applications expire after 7 days of inactivity
  
  @@map("signup_applications")
}

model Branch {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String?
  rules       Json?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownerId String
  owner   User           @relation("BranchOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members BranchMember[]
  items   Item[]

  @@map("branches")
}

model BranchMember {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  role      String   @default("member") // member, admin
  isActive  Boolean  @default(true)
  
  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId String
  branch   Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([userId, branchId])
  @@map("branch_members")
}

model StuffType {
  id          String   @id @default(cuid())
  name        String   @unique // "toolbox", "bicycle", "drill", etc.
  displayName String   // "Toolbox", "Bicycle", "Drill"
  iconPath    String   // "/stuff icons/noun-toolbox-8029186.svg"
  category    String   // "tools", "sports", "kitchen", "yard"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  items Item[]

  @@map("stuff_types")
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  condition   String   @default("good") // excellent, good, fair, poor
  isAvailable Boolean  @default(true)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enhanced with stuff type
  stuffTypeId String?
  stuffType   StuffType? @relation(fields: [stuffTypeId], references: [id])

  // Relationships
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  branchId       String
  branch         Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  borrowRequests BorrowRequest[]

  @@map("items")
}

model BorrowRequest {
  id          String   @id @default(cuid())
  status      String   @default("pending") // pending, approved, active, returned, cancelled
  requestedAt DateTime @default(now())
  approvedAt  DateTime?
  borrowedAt  DateTime?
  returnedAt  DateTime?
  dueDate     DateTime?
  notes       String?
  
  // Video selfie request fields
  videoUrl         String?  // URL to the borrower's selfie video
  signature        String?  // Digital signature data (base64 or JSON)
  promiseText      String?  // "I promise to return by [date]"
  promisedReturnBy DateTime? // Date the borrower promised to return
  
  // Lender response fields
  lenderResponse   String?  // Approve/decline message from lender
  responseToken    String?  // Secure token for approval page access
  respondedAt      DateTime? // When the lender responded
  
  // Pickup tracking
  pickedUpAt       DateTime?
  
  // Reminder tracking
  remindersSent    Int      @default(0) // Count of SMS reminders sent
  lastReminderAt   DateTime?

  // Relationships
  borrowerId String
  borrower   User   @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  lenderId   String
  lender     User   @relation("Lender", fields: [lenderId], references: [id], onDelete: Cascade)
  itemId     String
  item       Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("borrow_requests")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  location  String?
  interests String[] // Array of interests like "tools", "outdoor", "kitchen"
  source    String?  // How they heard about us
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist_entries")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuthCode {
  email     String   @id
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("auth_codes")
}
