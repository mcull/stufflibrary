generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
  // Note: Use DATABASE_ENV to switch between environments:
  // DATABASE_ENV=staging for staging database
  // DATABASE_ENV=production for production database
  // See src/lib/db-config.ts for configuration logic
}

model Address {
  id                 String       @id @default(cuid())
  address1           String
  address2           String?
  city               String
  state              String
  zip                String
  country            String       @default("US")
  latitude           Float?
  longitude          Float?
  formattedAddress   String?
  placeId            String?
  verifiedAt         DateTime?
  verificationMethod String?
  isActive           Boolean      @default(true)
  userId             String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations        Invitation[]

  @@map("addresses")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  phone               String?
  phoneVerified       Boolean         @default(false)
  bio                 String?
  shareInterests      String[]
  borrowInterests     String[]
  profileCompleted    Boolean         @default(false)
  onboardingStep      String?
  currentAddressId    String?
  movedInDate         DateTime?
  status              String          @default("active")
  trustScore          Float           @default(1000.0)
  warningCount        Int             @default(0)
  suspensionCount     Int             @default(0)
  lastWarningAt       DateTime?
  lastSuspensionAt    DateTime?
  isSuspended         Boolean         @default(false)
  suspensionEndsAt    DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  accounts            Account[]
  addresses           Address[]
  borrowRequests      BorrowRequest[]
  lentItems           BorrowRequest[] @relation("Lender")
  collectionMemberships CollectionMember[]
  ownedCollections      Collection[]       @relation("CollectionOwner")
  receivedInvitations Invitation[]    @relation("InvitationReceiver")
  sentInvitations     Invitation[]    @relation("InvitationSender")
  items               Item[]
  sessions            Session[]
  notifications       Notification[]
  reportedByUser      UserReport[]    @relation("ReportedUser")
  reportsCreated      UserReport[]    @relation("ReporterUser")
  disputesAsPartyA    Dispute[]       @relation("DisputePartyA")
  disputesAsPartyB    Dispute[]       @relation("DisputePartyB")
  adminActionsPerformed AdminAction[] @relation("AdminUser")
  adminActionsReceived  AdminAction[] @relation("TargetUser")
  securityEvents        SecurityEvent[]
  blockedIPs            BlockedIP[]
  auditLogs             AuditLog[]
  complianceReports     ComplianceReport[]
  feedbackVotes         FeedbackVote[]
  complianceAdmin       ComplianceReport[] @relation("ComplianceAdmin")

  @@map("users")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  type           String
  status         InvitationStatus @default(PENDING)
  message        String?
  token          String?          @unique
  qrCode         String?
  postcardSentAt DateTime?
  addressId      String?
  libraryId      String?
  senderId       String?
  receiverId     String?
  createdAt      DateTime         @default(now())
  sentAt         DateTime?
  acceptedAt     DateTime?
  expiresAt      DateTime
  address        Address?         @relation(fields: [addressId], references: [id])
  collection     Collection?      @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  receiver       User?            @relation("InvitationReceiver", fields: [receiverId], references: [id])
  sender         User?            @relation("InvitationSender", fields: [senderId], references: [id])

  @@unique([email, senderId, libraryId])
  @@index([token])
  @@index([email])
  @@index([libraryId])
  @@map("invitations")
}

model SignupApplication {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  bio             String?
  interests       String[]
  addressData     Json?
  addressVerified Boolean   @default(false)
  invitationId    String?
  referralSource  String?
  currentStep     String    @default("email")
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  expiresAt       DateTime

  @@map("signup_applications")
}

model Collection {
  id          String             @id @default(cuid())
  name        String
  description String?
  location    String?
  rules       Json?
  isPublic    Boolean            @default(false)
  isArchived  Boolean            @default(false)
  archivedAt  DateTime?
  inviteRateLimitPerHour Int?    @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  ownerId     String
  members     CollectionMember[]
  owner       User               @relation("CollectionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations Invitation[]
  items       ItemCollection[]
  reports     UserReport[]

  @@map("libraries")
}

model CollectionMember {
  id           String     @id @default(cuid())
  joinedAt     DateTime   @default(now())
  role         String     @default("member")
  isActive     Boolean    @default(true)
  userId       String
  collectionId String     @map("libraryId")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId])
  @@map("library_members")
}

model StuffType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  iconPath    String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]

  @@map("stuff_types")
}

model Item {
  id                     String          @id @default(cuid())
  name                   String
  description            String?
  suggestedBorrowScript  String?
  category               String?
  condition              String          @default("good")
  location               String?         // e.g., "garage", "kitchen", "basement"
  imageUrl               String?
  // Watercolor rendering fields
  watercolorUrl          String?
  watercolorThumbUrl     String?
  styleVersion           String?         // e.g., "wc/v1"
  aiModel                String?         // e.g., "gemini-2.5-flash-image"
  synthIdWatermark       Boolean         @default(false)
  flags                  Json?           // e.g., ["person_detected"]
  active                 Boolean         @default(true) // false for draft items during creation
  currentBorrowRequestId String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  stuffTypeId            String?
  ownerId                String
  borrowRequests         BorrowRequest[]
  owner                  User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stuffType              StuffType?      @relation(fields: [stuffTypeId], references: [id])
  collections            ItemCollection[]
  reports                UserReport[]
  disputes               Dispute[]

  @@map("items")
}

model BorrowRequest {
  id                   String              @id @default(cuid())
  status               BorrowRequestStatus @default(PENDING)
  requestMessage       String?
  lenderMessage        String?
  videoUrl             String?
  requestedReturnDate  DateTime
  actualReturnDate     DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  approvedAt           DateTime?
  returnedAt           DateTime?
  borrowerId           String
  lenderId             String
  itemId               String
  borrower             User                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  item                 Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  lender               User                @relation("Lender", fields: [lenderId], references: [id], onDelete: Cascade)
  disputes             Dispute[]

  @@index([borrowerId])
  @@index([lenderId])
  @@index([itemId])
  @@index([status])
  @@map("borrow_requests")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  location  String?
  interests String[]
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist_entries")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuthCode {
  email     String   @id
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("auth_codes")
}

model ItemCollection {
  id           String     @id @default(cuid())
  itemId       String
  collectionId String     @map("libraryId")
  addedAt      DateTime   @default(now())
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([itemId, collectionId])
  @@map("item_libraries")
}

model Notification {
  id              String             @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  actionUrl       String?
  isRead          Boolean            @default(false)
  emailSent       Boolean            @default(false)
  emailSentAt     DateTime?
  relatedItemId   String?
  relatedRequestId String?
  metadata        Json?              // Store additional context data
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum InvitationStatus {
  PENDING
  SENT
  ACCEPTED
  EXPIRED
  DECLINED
  CANCELLED
}

enum BorrowRequestStatus {
  PENDING
  APPROVED
  DECLINED
  ACTIVE
  RETURNED
  CANCELLED
}

model UserReport {
  id          String           @id @default(cuid())
  reason      UserReportReason
  description String?
  status      ReportStatus     @default(PENDING)
  priority    ReportPriority   @default(LOW)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  reviewedAt  DateTime?
  reporterId  String
  reportedId  String
  reviewerId  String?
  itemId      String?
  libraryId   String?
  notes       String?
  evidence    Json?
  reporter    User             @relation("ReporterUser", fields: [reporterId], references: [id])
  reported    User             @relation("ReportedUser", fields: [reportedId], references: [id])
  item        Item?            @relation(fields: [itemId], references: [id])
  collection  Collection?      @relation(fields: [libraryId], references: [id])

  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("user_reports")
}

model Dispute {
  id           String        @id @default(cuid())
  type         DisputeType
  status       DisputeStatus @default(OPEN)
  priority     ReportPriority @default(MEDIUM)
  title        String
  description  String
  resolution   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  resolvedAt   DateTime?
  partyAId     String
  partyBId     String
  itemId       String?
  borrowRequestId String?
  assignedTo   String?
  partyA       User          @relation("DisputePartyA", fields: [partyAId], references: [id])
  partyB       User          @relation("DisputePartyB", fields: [partyBId], references: [id])
  item         Item?         @relation(fields: [itemId], references: [id])
  borrowRequest BorrowRequest? @relation(fields: [borrowRequestId], references: [id])

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([createdAt])
  @@map("disputes")
}

model AdminAction {
  id           String         @id @default(cuid())
  type         AdminActionType
  description  String
  reason       String?
  metadata     Json?
  createdAt    DateTime       @default(now())
  adminId      String
  targetUserId String
  admin        User           @relation("AdminUser", fields: [adminId], references: [id])
  targetUser   User           @relation("TargetUser", fields: [targetUserId], references: [id])

  @@index([type])
  @@index([createdAt])
  @@index([targetUserId])
  @@map("admin_actions")
}

enum UserReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  FRAUD
  HARASSMENT
  COPYRIGHT_VIOLATION
  SAFETY_CONCERN
  TERMS_VIOLATION
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
  ESCALATED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DisputeType {
  ITEM_NOT_RETURNED
  ITEM_DAMAGED
  ITEM_NOT_AS_DESCRIBED
  PAYMENT_DISPUTE
  HARASSMENT
  OTHER
}

enum DisputeStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AdminActionType {
  USER_WARNING
  USER_SUSPENSION
  USER_UNSUSPENSION
  TRUST_SCORE_ADJUSTMENT
  ITEM_REMOVAL
  LIBRARY_SUSPENSION
  DISPUTE_RESOLUTION
  MANUAL_INTERVENTION
}

enum NotificationType {
  BORROW_REQUEST_RECEIVED    // New request received by lender
  BORROW_REQUEST_APPROVED    // Request approved by lender
  BORROW_REQUEST_DECLINED    // Request declined by lender  
  BORROW_REQUEST_CANCELLED   // Request cancelled by borrower/lender
  ITEM_DUE_TOMORROW         // Return reminder 24h before
  ITEM_OVERDUE              // Item past due date
  ITEM_RETURNED             // Borrower marked as returned
  RETURN_CONFIRMED          // Lender confirmed return
  LIBRARY_INVITATION        // Invited to join library
  SYSTEM_ANNOUNCEMENT       // General system messages
}

model SecurityEvent {
  id          String            @id @default(cuid())
  type        SecurityEventType
  severity    SecuritySeverity  @default(INFO)
  message     String
  details     Json?
  ipAddress   String?
  userAgent   String?
  userId      String?
  endpoint    String?
  method      String?
  statusCode  Int?
  createdAt   DateTime          @default(now())
  resolvedAt  DateTime?
  user        User?             @relation(fields: [userId], references: [id])

  @@index([type])
  @@index([severity])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([userId])
  @@map("security_events")
}

model BlockedIP {
  id          String           @id @default(cuid())
  ipAddress   String           @unique
  reason      BlockedIPReason
  description String?
  blockedAt   DateTime         @default(now())
  expiresAt   DateTime?
  isActive    Boolean          @default(true)
  blockedBy   String?
  admin       User?            @relation(fields: [blockedBy], references: [id])

  @@index([ipAddress])
  @@index([isActive])
  @@index([expiresAt])
  @@map("blocked_ips")
}

model AuditLog {
  id           String    @id @default(cuid())
  action       String
  entityType   String
  entityId     String
  userId       String?
  details      Json?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  user         User?     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([entityType])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model ComplianceReport {
  id          String             @id @default(cuid())
  type        ComplianceType
  status      ComplianceStatus   @default(PENDING)
  requestedBy String?
  userId      String?
  startDate   DateTime
  endDate     DateTime
  data        Json?
  generatedAt DateTime           @default(now())
  completedAt DateTime?
  user        User?              @relation(fields: [userId], references: [id])
  admin       User?              @relation("ComplianceAdmin", fields: [requestedBy], references: [id])

  @@index([type])
  @@index([status])
  @@index([userId])
  @@index([generatedAt])
  @@map("compliance_reports")
}

// Tracks internal votes for GitHub feedback issues per StuffLibrary user
model FeedbackVote {
  id          String   @id @default(cuid())
  issueNumber Int
  userId      String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([issueNumber, userId])
  @@index([issueNumber])
  @@index([userId])
  @@map("feedback_votes")
}

// Tracks the last deployed commit SHA per environment (e.g., production, preview)
model DeployMarker {
  id        String   @id @default(cuid())
  env       String   // e.g., "production" | "preview" | branch name
  lastSha   String
  updatedAt DateTime @updatedAt

  @@unique([env])
  @@map("deploy_markers")
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGIN_BLOCKED
  PASSWORD_RESET
  ACCOUNT_LOCKED
  SUSPICIOUS_ACTIVITY
  API_ABUSE
  RATE_LIMIT_EXCEEDED
  IP_BLOCKED
  UNAUTHORIZED_ACCESS
  DATA_BREACH_ATTEMPT
  ADMIN_ACTION
  BULK_OPERATION
  EXPORT_DATA
  DELETE_ACCOUNT
}

enum SecuritySeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BlockedIPReason {
  FAILED_LOGINS
  API_ABUSE
  SUSPICIOUS_ACTIVITY
  MANUAL_BLOCK
  AUTOMATED_THREAT
  SPAM
  BOT_TRAFFIC
}

enum ComplianceType {
  GDPR_DATA_REQUEST
  ACCOUNT_DELETION
  DATA_EXPORT
  PRIVACY_AUDIT
  RETENTION_CLEANUP
}

enum ComplianceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
