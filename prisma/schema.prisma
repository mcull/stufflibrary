generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
  // Note: Use DATABASE_ENV to switch between environments:
  // DATABASE_ENV=staging for staging database
  // DATABASE_ENV=production for production database
  // See src/lib/db-config.ts for configuration logic
}

model Address {
  id                 String       @id @default(cuid())
  address1           String
  address2           String?
  city               String
  state              String
  zip                String
  country            String       @default("US")
  latitude           Float?
  longitude          Float?
  formattedAddress   String?
  placeId            String?
  verifiedAt         DateTime?
  verificationMethod String?
  isActive           Boolean      @default(true)
  userId             String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations        Invitation[]

  @@map("addresses")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  phone               String?
  phoneVerified       Boolean         @default(false)
  bio                 String?
  shareInterests      String[]
  borrowInterests     String[]
  profileCompleted    Boolean         @default(false)
  onboardingStep      String?
  currentAddressId    String?
  movedInDate         DateTime?
  status              String          @default("active")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  accounts            Account[]
  addresses           Address[]
  borrowRequests      BorrowRequest[]
  lentItems           BorrowRequest[] @relation("Lender")
  libraryMemberships  LibraryMember[]
  ownedLibraries      Library[]       @relation("LibraryOwner")
  receivedInvitations Invitation[]    @relation("InvitationReceiver")
  sentInvitations     Invitation[]    @relation("InvitationSender")
  items               Item[]
  sessions            Session[]
  notifications       Notification[]

  @@map("users")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  type           String
  status         InvitationStatus @default(PENDING)
  message        String?
  token          String?          @unique
  qrCode         String?
  postcardSentAt DateTime?
  addressId      String?
  libraryId      String?
  senderId       String?
  receiverId     String?
  createdAt      DateTime         @default(now())
  sentAt         DateTime?
  acceptedAt     DateTime?
  expiresAt      DateTime
  address        Address?         @relation(fields: [addressId], references: [id])
  library        Library?         @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  receiver       User?            @relation("InvitationReceiver", fields: [receiverId], references: [id])
  sender         User?            @relation("InvitationSender", fields: [senderId], references: [id])

  @@unique([email, senderId, libraryId])
  @@index([token])
  @@index([email])
  @@index([libraryId])
  @@map("invitations")
}

model SignupApplication {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  bio             String?
  interests       String[]
  addressData     Json?
  addressVerified Boolean   @default(false)
  invitationId    String?
  referralSource  String?
  currentStep     String    @default("email")
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  expiresAt       DateTime

  @@map("signup_applications")
}

model Library {
  id          String          @id @default(cuid())
  name        String
  description String?
  location    String?
  rules       Json?
  isPublic    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     String
  members     LibraryMember[]
  owner       User            @relation("LibraryOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations Invitation[]
  items       ItemLibrary[]

  @@map("libraries")
}

model LibraryMember {
  id        String  @id @default(cuid())
  joinedAt  DateTime @default(now())
  role      String   @default("member")
  isActive  Boolean  @default(true)
  userId    String
  libraryId String
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, libraryId])
  @@map("library_members")
}

model StuffType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  iconPath    String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]

  @@map("stuff_types")
}

model Item {
  id                     String          @id @default(cuid())
  name                   String
  description            String?
  category               String?
  condition              String          @default("good")
  location               String?         // e.g., "garage", "kitchen", "basement"
  imageUrl               String?
  currentBorrowRequestId String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  stuffTypeId            String?
  ownerId                String
  borrowRequests         BorrowRequest[]
  owner                  User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stuffType              StuffType?      @relation(fields: [stuffTypeId], references: [id])
  libraries              ItemLibrary[]

  @@map("items")
}

model BorrowRequest {
  id                   String              @id @default(cuid())
  status               BorrowRequestStatus @default(PENDING)
  requestMessage       String?
  lenderMessage        String?
  videoUrl             String?
  requestedReturnDate  DateTime
  actualReturnDate     DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  approvedAt           DateTime?
  returnedAt           DateTime?
  borrowerId           String
  lenderId             String
  itemId               String
  borrower             User                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  item                 Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  lender               User                @relation("Lender", fields: [lenderId], references: [id], onDelete: Cascade)

  @@index([borrowerId])
  @@index([lenderId])
  @@index([itemId])
  @@index([status])
  @@map("borrow_requests")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  location  String?
  interests String[]
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist_entries")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuthCode {
  email     String   @id
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("auth_codes")
}

model ItemLibrary {
  id        String   @id @default(cuid())
  itemId    String
  libraryId String
  addedAt   DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@unique([itemId, libraryId])
  @@map("item_libraries")
}

model Notification {
  id              String             @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  actionUrl       String?
  isRead          Boolean            @default(false)
  emailSent       Boolean            @default(false)
  emailSentAt     DateTime?
  relatedItemId   String?
  relatedRequestId String?
  metadata        Json?              // Store additional context data
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum InvitationStatus {
  PENDING
  SENT
  ACCEPTED
  EXPIRED
  DECLINED
  CANCELLED
}

enum BorrowRequestStatus {
  PENDING
  APPROVED
  DECLINED
  ACTIVE
  RETURNED
  CANCELLED
}

enum NotificationType {
  BORROW_REQUEST_RECEIVED    // New request received by lender
  BORROW_REQUEST_APPROVED    // Request approved by lender
  BORROW_REQUEST_DECLINED    // Request declined by lender  
  BORROW_REQUEST_CANCELLED   // Request cancelled by borrower/lender
  ITEM_DUE_TOMORROW         // Return reminder 24h before
  ITEM_OVERDUE              // Item past due date
  ITEM_RETURNED             // Borrower marked as returned
  RETURN_CONFIRMED          // Lender confirmed return
  LIBRARY_INVITATION        // Invited to join library
  SYSTEM_ANNOUNCEMENT       // General system messages
}
